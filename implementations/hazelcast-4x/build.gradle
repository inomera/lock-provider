plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

dependencies {
    api project(':lock-provider-api')
    compileOnly 'com.hazelcast:hazelcast:4.2.2'

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.2.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.2.0')
    testImplementation "org.mockito:mockito-core:2.23.4"
    testImplementation('org.mockito:mockito-junit-jupiter:2.18.3')
    testImplementation('org.hamcrest:hamcrest-all:1.3')
    testImplementation('com.google.guava:guava:27.0.1-jre')
}

apply from: "${rootProject.rootDir}/gradle/tests.gradle"

def isSnapshot = Boolean.parseBoolean(System.getenv("SNAPSHOT_RELEASE"))
def mavenSnapshotUrl = project.findProperty('mavenSnapshotUrl') ?: 'Undefined'
def mavenReleaseUrl = project.findProperty('mavenReleaseUrl') ?: 'Undefined'
def mavenUsername = project.findProperty('mavenUsername') ?: 'Undefined'
def mavenPassword = project.findProperty('mavenPassword') ?: 'Undefined'
def mavenPackageGroup = project.findProperty('mavenPackageGroup') ?: 'Undefined'

group = 'com.inomera.telco.commons'
version = project.file('VERSION').text.trim() + (isSnapshot ? "-SNAPSHOT" : "")
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testImplementation {
        extendsFrom compileOnly
    }
}

compileJava.dependsOn(processResources)

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourceJar', Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourceJar
    archives javadocJar
}

// Signing
signing {
    sign configurations.archives
}

signArchives.onlyIf { gradle.taskGraph.hasTask(publish) && !isSnapshot }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = "${project.group}"
            artifactId = "${project.name}"
            version = "${project.version}"

            pom {
                name = 'lock-provider'
                description = 'Distributed locks made easy'
                url = 'https://github.com/inomera/lock-provider'

                organization {
                    name = 'Inomera Research'
                    url = 'https://inomera.com/'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'sedran'
                        name = 'Serdar Kuzucu'
                        organization = 'Inomera'
                        organizationUrl = 'https://inomera.com/'
                    }
                    developer {
                        id = 'TurgayCan'
                        name = 'Turgay Can'
                        organization = 'Inomera'
                        organizationUrl = 'https://inomera.com/'
                    }
                }
                scm {
                    url = 'https://github.com/inomera/lock-provider'
                    connection = 'scm:git:https://github.com/inomera/lock-provider.git'
                    developerConnection = 'scm:git:https://github.com/inomera/lock-provider.git'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/inomera/lock-provider/issues'
                }
            }

            // create the sign pom artifact
            pom.withXml {
                def root = asNode()

                // eliminate test-scoped dependencies (no need in maven central POMs)
                root.dependencies.removeAll { dep ->
                    dep.scope == "test"
                }

                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url isSnapshot ? "${mavenSnapshotUrl}" : "${mavenReleaseUrl}"
            credentials {
                username "${mavenUsername}"
                password "${mavenPassword}"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

nexusStaging {
    packageGroup = "${mavenPackageGroup}"
    username = "${mavenUsername}"
    password = "${mavenPassword}"
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
